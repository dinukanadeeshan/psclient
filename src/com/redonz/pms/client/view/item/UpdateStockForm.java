/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.redonz.pms.client.view.item;

//<editor-fold defaultstate="collapsed" desc="import statements">
import com.redonz.pms.client.connector.ServerConnector;
import com.redonz.pms.client.observer.BatchItemObserver;
import com.redonz.pms.client.observer.ItemObserver;
import com.redonz.pms.client.others.IDGen;
import com.redonz.pms.client.others.Validation;
import com.redonz.pms.client.view.customer.AddCustomerForm;
import com.redonz.pms.common.controller.ItemController;
import com.redonz.pms.common.model.BatchItem;
import com.redonz.pms.common.model.Item;
import com.redonz.pms.common.model.ItemDetail;
import com.redonz.pms.common.model.ObserverTO;
import java.awt.Color;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.ConnectException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
//</editor-fold>

/**
 *
 * @author Nadeeshan
 */
public class UpdateStockForm extends javax.swing.JDialog {

    private int caretPosition;
    private DefaultTableModel dtm;
    private int existRow = -1;
    private BatchItemObserver batchItemObserver;
    private ArrayList<Integer> integers = new ArrayList<>();
    private boolean itemNotFound = false;
    private ItemObserver itemObserver;
    private String itemCode;

    /**
     * Creates new form UpdateStockForm
     */
    public UpdateStockForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        dtm = (DefaultTableModel) itemTable.getModel();
        itemTable.setDefaultRenderer(Object.class, new ItemTableCellRenderer());
        itemTable.setRowHeight(20);

        try {
            batchItemObserver = new BatchItemObserver(this);
            itemObserver = new ItemObserver(this);
            itemObserver.setChanged(true);
            ServerConnector.getServerConnector().getBatchItemController().addBatchItemObserver(batchItemObserver);
            ServerConnector.getServerConnector().getItemController().addItemObserver(itemObserver);
            System.out.println(itemObserver.isChanged());
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(UpdateStockForm.class.getName()).log(Level.SEVERE, null, ex);
            if (ex.getMessage().contains("Connection refused to host")) {
                JOptionPane.showMessageDialog(this, "Connection has corrupt or no server started....", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        itemTable.setDefaultRenderer(Object.class, new MyRendererClass());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        barcodeLabel = new javax.swing.JLabel();
        barcodeTextField = new javax.swing.JTextField();
        batchNoLabel = new javax.swing.JLabel();
        batchNoTextField = new javax.swing.JTextField();
        unitPriceLabel = new javax.swing.JLabel();
        unitPriceTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        qtyTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        itemNameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        categoryTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        expDatePicker = new org.jdesktop.swingx.JXDatePicker();
        msgLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(247, 247, 247));

        titleLabel.setBackground(new java.awt.Color(255, 255, 255));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(102, 102, 102));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Update Stock");
        titleLabel.setOpaque(true);

        saveButton.setBackground(new java.awt.Color(153, 204, 255));
        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
        });
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(255, 153, 153));
        cancelButton.setText("Cancel");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Batch No", "Unit Price", "Qty", "Exp Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        itemTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                itemTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);

        barcodeLabel.setText("Barcode : ");

        barcodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeTextFieldActionPerformed(evt);
            }
        });
        barcodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                barcodeTextFieldFocusGained(evt);
            }
        });
        barcodeTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                barcodeTextFieldCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                barcodeTextFieldInputMethodTextChanged(evt);
            }
        });
        barcodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeTextFieldKeyReleased(evt);
            }
        });

        batchNoLabel.setText("Batch No :");

        batchNoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchNoTextFieldActionPerformed(evt);
            }
        });
        batchNoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                batchNoTextFieldKeyReleased(evt);
            }
        });

        unitPriceLabel.setText("Unit Price :");

        unitPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitPriceTextFieldActionPerformed(evt);
            }
        });
        unitPriceTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitPriceTextFieldFocusLost(evt);
            }
        });
        unitPriceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                unitPriceTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitPriceTextFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("Qty :");

        qtyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextFieldActionPerformed(evt);
            }
        });
        qtyTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtyTextFieldFocusLost(evt);
            }
        });
        qtyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Exp Date : ");

        jLabel3.setText("Item Name : ");

        itemNameTextField.setEditable(false);
        itemNameTextField.setFocusable(false);

        jLabel4.setText("Category :");

        categoryTextField.setEditable(false);
        categoryTextField.setFocusable(false);

        addButton.setBackground(new java.awt.Color(153, 248, 224));
        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setBackground(new java.awt.Color(255, 153, 153));
        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        expDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expDatePickerActionPerformed(evt);
            }
        });

        msgLabel.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        msgLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(batchNoLabel)
                        .addGap(15, 15, 15)
                        .addComponent(batchNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(expDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(msgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addComponent(unitPriceLabel)
                                        .addGap(13, 13, 13)
                                        .addComponent(unitPriceTextField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addComponent(barcodeLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(qtyTextField))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel4)
                                        .addGap(7, 7, 7)
                                        .addComponent(categoryTextField)))))
                        .addGap(27, 27, 27))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(69, 69, 69))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barcodeLabel)
                    .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(categoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batchNoLabel)
                    .addComponent(batchNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitPriceLabel)
                    .addComponent(unitPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msgLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(expDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseEntered
        saveButton.setBackground(new Color(102, 204, 255));
    }//GEN-LAST:event_saveButtonMouseEntered

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        saveButton.setBackground(new Color(153, 204, 255));
    }//GEN-LAST:event_saveButtonMouseExited

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        cancelButton.setBackground(new Color(255, 102, 102));
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited
        cancelButton.setBackground(new Color(255, 153, 153));
    }//GEN-LAST:event_cancelButtonMouseExited

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String batchNo = batchNoTextField.getText();
        boolean isExist = false;

        for (int i = 0; i < itemTable.getRowCount(); i++) {
            String bn = (String) itemTable.getValueAt(i, 1);
            if (bn.equals(batchNo)) {
                isExist = true;
                existRow = i;
                break;
            }
        }

        if (isExist) {
            itemTable.repaint();
            int res = JOptionPane.showConfirmDialog(this, "Edit batch detail... ?", "", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                String barcode = barcodeTextField.getText();
                String unitPrice = unitPriceTextField.getText();
                String qty = qtyTextField.getText();
                String expDate = new SimpleDateFormat("yyyy-MM-dd").format(expDatePicker.getDate());
                dtm.removeRow(existRow);
                dtm.addRow(new String[]{barcode, batchNo, unitPrice, qty, expDate});
                setTextFieldsEmpty();
            }
            existRow = -1;
            itemTable.repaint();

        } else {

            String barcode = barcodeTextField.getText();
            String unitPrice = unitPriceTextField.getText();
            String qty = qtyTextField.getText();
            String expDate = new SimpleDateFormat("yyyy-MM-dd").format(expDatePicker.getDate());

            dtm.addRow(new String[]{barcode, batchNo, unitPrice, qty, expDate});
            setTextFieldsEmpty();
        }
        int rowCount = itemTable.getRowCount();
        saveButton.setEnabled(rowCount > 0);

    }//GEN-LAST:event_addButtonActionPerformed
    private void barcodeTextFieldCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_barcodeTextFieldCaretPositionChanged
    }//GEN-LAST:event_barcodeTextFieldCaretPositionChanged

    private void barcodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeTextFieldKeyReleased
        caretPosition = barcodeTextField.getCaretPosition();
        Validation.validateBarcodeText(barcodeTextField);
        setAddButtonEnable();
    }//GEN-LAST:event_barcodeTextFieldKeyReleased

    private void barcodeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeTextFieldFocusGained
        caretPosition = 0;
    }//GEN-LAST:event_barcodeTextFieldFocusGained

    private void barcodeTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_barcodeTextFieldInputMethodTextChanged
    }//GEN-LAST:event_barcodeTextFieldInputMethodTextChanged

    private void barcodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeTextFieldActionPerformed
        String barcode = barcodeTextField.getText();
        try {
            setItemDetaills(barcode);

        } catch (ConnectException ex) {
            JOptionPane.showMessageDialog(this, "Server Connection has currupted...");
        } catch (NotBoundException ex) {
            Logger.getLogger(UpdateStockForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UpdateStockForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UpdateStockForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UpdateStockForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateStockForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_barcodeTextFieldActionPerformed

    private void batchNoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchNoTextFieldActionPerformed
        unitPriceTextField.requestFocus();
    }//GEN-LAST:event_batchNoTextFieldActionPerformed

    private void unitPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitPriceTextFieldActionPerformed
        qtyTextField.requestFocus();
    }//GEN-LAST:event_unitPriceTextFieldActionPerformed

    private void qtyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextFieldActionPerformed

        JButton btn = (JButton) expDatePicker.getComponent(1);
        MouseListener[] mouseListeners = btn.getMouseListeners();
        mouseListeners[1].mousePressed(null);
    }//GEN-LAST:event_qtyTextFieldActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            ArrayList<BatchItem> batchItemList = new ArrayList<>();
            
            for (int i = 0; i < itemTable.getRowCount(); i++) {
//                itemCode = IDGen.getNextId(itemCode);
                itemCode = ServerConnector.getServerConnector().getBatchItemController().getNextBatchItemCode();
                String barcode = (String) itemTable.getValueAt(i, 0);
                String batchNo = (String) itemTable.getValueAt(i, 1);
                double unitPrice = Double.parseDouble((String) itemTable.getValueAt(i, 2));
                double qty = Double.parseDouble((String) itemTable.getValueAt(i, 3));
                String expDate = (String) itemTable.getValueAt(i, 4);
                batchItemList.add(new BatchItem(itemCode, barcode, batchNo, expDate, unitPrice, qty));
            }
            batchItemObserver.setChanged(true);
            boolean isSaved = ServerConnector.getServerConnector().getBatchItemController().saveBatchItemList(batchItemList);


            if (isSaved) {
                JOptionPane.showMessageDialog(this, "Saved...");
                setAddButtonEnable();
                dtm.setRowCount(0);
            } else {
                JOptionPane.showMessageDialog(this, "Saving failed...");

            }
            batchItemObserver.setChanged(false);
            integers.clear();
        } catch (SQLException | ClassNotFoundException | RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(UpdateStockForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void batchNoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_batchNoTextFieldKeyReleased
        setAddButtonEnable();
    }//GEN-LAST:event_batchNoTextFieldKeyReleased

    private void unitPriceTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceTextFieldKeyReleased
        setAddButtonEnable();
        Validation.validatePriceText(unitPriceTextField);
    }//GEN-LAST:event_unitPriceTextFieldKeyReleased

    private void qtyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextFieldKeyReleased
        setAddButtonEnable();
        Validation.validateInt(qtyTextField);
    }//GEN-LAST:event_qtyTextFieldKeyReleased

    private void itemTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_itemTablePropertyChange
    }//GEN-LAST:event_itemTablePropertyChange

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed

        for (int i = 0; i < itemTable.getSelectedRowCount(); i++) {
            dtm.removeRow(itemTable.getSelectedRow());
        }

        int rowCount = itemTable.getRowCount();
        saveButton.setEnabled(rowCount > 0);
        removeButton.setEnabled(false);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void unitPriceTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceTextFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            String text = unitPriceTextField.getText();
            if (text.startsWith("0")) {
                text = text.substring(1);

            }
            unitPriceTextField.setText(text);
        }
    }//GEN-LAST:event_unitPriceTextFieldKeyPressed

    private void expDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expDatePickerActionPerformed
        Date expDate = expDatePicker.getDate();
        Date curDate = new Date();
        boolean before = curDate.before(expDate);
        if (!before) {

            msgLabel.setText("Exp date cannot be before current date...");
        } else {

            msgLabel.setText("");
        }
        setAddButtonEnable();
        addButton.doClick();
    }//GEN-LAST:event_expDatePickerActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        removeButton.setEnabled(true);
        if (evt.getClickCount() == 2) {
            editRow(itemTable.getSelectedRow());
        }
    }//GEN-LAST:event_itemTableMouseClicked

    private void unitPriceTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitPriceTextFieldFocusLost
        if (unitPriceTextField.getText().isEmpty() || unitPriceTextField.getText() == null
                || unitPriceTextField.getText().equals("0")) {
            unitPriceTextField.setText("0.00");
        }
    }//GEN-LAST:event_unitPriceTextFieldFocusLost

    private void qtyTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyTextFieldFocusLost
        if (qtyTextField.getText().isEmpty() || qtyTextField.getText() == null) {
            qtyTextField.setText("0");
        }
    }//GEN-LAST:event_qtyTextFieldFocusLost

    // <editor-fold defaultstate="collapsed" desc="main method & variable declaration">              
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateStockForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateStockForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateStockForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateStockForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                UpdateStockForm dialog = new UpdateStockForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel barcodeLabel;
    private javax.swing.JTextField barcodeTextField;
    private javax.swing.JLabel batchNoLabel;
    private javax.swing.JTextField batchNoTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField categoryTextField;
    private org.jdesktop.swingx.JXDatePicker expDatePicker;
    private javax.swing.JTextField itemNameTextField;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JTextField qtyTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel unitPriceLabel;
    private javax.swing.JTextField unitPriceTextField;
    // End of variables declaration//GEN-END:variables
// </editor-fold>  

    private void setTextFieldsEmpty() {
        barcodeTextField.setText("");
        itemNameTextField.setText("");
        categoryTextField.setText("");
        batchNoTextField.setText("");
        unitPriceTextField.setText("");
        qtyTextField.setText("");
        expDatePicker.setDate(new Date());
        barcodeTextField.requestFocus();
    }

    public void setItemDetaills(String barcode) throws NotBoundException, HeadlessException, ClassNotFoundException, MalformedURLException, RemoteException, SQLException, FileNotFoundException, IOException {
        ItemController itemController = ServerConnector.getServerConnector().getItemController();
        ItemDetail itemDetail = itemController.getAbstractItemDetail(barcode);
        if (itemDetail != null) {
            itemNameTextField.setText(itemDetail.getItem().getDescription());
            categoryTextField.setText(itemDetail.getCategory().getDescription());
            batchNoTextField.requestFocus();
        } else {
            itemNotFound = true;
            int res = JOptionPane.showConfirmDialog(this, "No item found... Do you want to add new...?", "", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                itemNotFound = false;
                new AddItemForm(this, true, barcode).setVisible(true);
            }
        }
    }

    class ItemTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setBackground(null);
            Component tableCellRendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
            if (row == existRow) {
                setBackground(new Color(255, 153, 153));
            }
            return tableCellRendererComponent;
        }
    }

    private void editRow(int row) {
        String newUnitPrice = JOptionPane.showInputDialog(this, "Change Unit Price : ", (String) itemTable.getValueAt(row, 2));

        if (newUnitPrice != null) {
            itemTable.setValueAt(newUnitPrice, row, 2);
        }
        String newQty = JOptionPane.showInputDialog(this, "Change Qty : ", (String) itemTable.getValueAt(row, 3));
        if (newQty != null) {
            itemTable.setValueAt(newQty, row, 3);
        }
        String newExpDate = JOptionPane.showInputDialog(this, "Change Exp Date : ", (String) itemTable.getValueAt(row, 4));
        if (newExpDate != null) {
            itemTable.setValueAt(newUnitPrice, row, 2);
        }

    }

    private boolean setAddButtonEnable() {
        Date expDate = expDatePicker.getDate();
        Date curDate = new Date();

        boolean before = true;
        if (expDate != null) {
            before = curDate.before(expDate);
        }
        boolean condition = true;
        if (barcodeTextField.getText() != null && batchNoTextField.getText() != null && unitPriceTextField.getText() != null && qtyTextField.getText() != null && expDate != null) {
            condition = barcodeTextField.getText().isEmpty() || batchNoTextField.getText().isEmpty() || unitPriceTextField.getText().isEmpty() || qtyTextField.getText().isEmpty();
        }
        addButton.setEnabled(!condition && before);
        return condition;
    }

    public void notifyChanges(ObserverTO observerTO) {
        Object obj = observerTO.getObj();

        if (obj instanceof ArrayList) {
            ArrayList<BatchItem> batchItems = (ArrayList<BatchItem>) obj;

            integers.clear();
            for (int i = 0; i < itemTable.getRowCount(); i++) {
                String barcode = (String) itemTable.getValueAt(i, 0);
                String batchNo = (String) itemTable.getValueAt(i, 1);
                for (BatchItem batchItem : batchItems) {
                    if (batchItem.getBarCode().equals(barcode) && batchItem.getBatchNo().equals(batchNo)) {
                        integers.add(i);
                    }
                }
            }
            itemTable.repaint();
            int res = JOptionPane.showConfirmDialog(this, "<html>" + batchItems + " " + observerTO.getAction() + " ...<br>Continue anyway....?</html>", "", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                integers.clear();
                itemTable.repaint();
            } else {
                for (BatchItem batchItem : batchItems) {
                    for (int i = 0; i < itemTable.getRowCount(); i++) {
                        String barcode = (String) itemTable.getValueAt(i, 0);
                        String batchNo = (String) itemTable.getValueAt(i, 1);
                        if (batchItem.getBarCode().equals(barcode) && batchItem.getBatchNo().equals(batchNo)) {
                            dtm.removeRow(i);
                            break;
                        }
                    }
                }
                integers.clear();
                itemTable.repaint();
            }
        } else if (obj instanceof BatchItem) {
            BatchItem batchItem = (BatchItem) obj;
            integers.clear();
            for (int i = 0; i < itemTable.getRowCount(); i++) {
                String barcode = (String) itemTable.getValueAt(i, 0);
                String batchNo = (String) itemTable.getValueAt(i, 1);
                if (batchItem.getBarCode().equals(barcode) && batchItem.getBatchNo().equals(batchNo)) {
                    integers.add(i);
                }
            }
            itemTable.repaint();
            int res = JOptionPane.showConfirmDialog(this, "<html>" + batchItem + " " + observerTO.getAction() + " ...<br>Continue anyway....?</html>");
            if (res == JOptionPane.YES_OPTION) {
                integers.clear();
                itemTable.repaint();
            } else {

                for (int i = 0; i < itemTable.getRowCount(); i++) {
                    String barcode = (String) itemTable.getValueAt(i, 0);
                    String batchNo = (String) itemTable.getValueAt(i, 1);
                    if (batchItem.getBarCode().equals(barcode) && batchItem.getBatchNo().equals(batchNo)) {
                        dtm.removeRow(i);
                        break;
                    }
                }

                integers.clear();
                itemTable.repaint();
            }
        } else if (obj instanceof Item) {
            Item item = (Item) obj;
            if (itemNotFound) {
                JOptionPane.showMessageDialog(this, item + "  " + observerTO.getAction() + " ...");
                String text = barcodeTextField.getText();
                if (!text.isEmpty()) {
                    try {
                        setItemDetaills(text);
                    } catch (NotBoundException | HeadlessException | ClassNotFoundException | MalformedURLException | RemoteException | SQLException ex) {
                        Logger.getLogger(UpdateStockForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }

    class MyRendererClass extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setBackground(null);
            setForeground(Color.BLACK);
            Component tableCellRendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
            if (integers.contains(row)) {
                setBackground(new Color(255, 102, 102));
                setForeground(Color.WHITE);
            }
            return tableCellRendererComponent;
        }
    }
}
